name: Deploy Iot System Application

on:
  push:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Run tests and generate coverage report
        run: ./gradlew test jacocoTestReport

      - name: List build directory
        run: ls -l build

      - name: List jacocoHtml directory
        run: ls -l build/jacocoHtml || echo "Directory build/jacocoHtml does not exist"

      - name: Check if coverage reports exist
        run: if [ ! -d "build/jacocoHtml" ]; then echo "Coverage reports directory does not exist"; exit 1; fi

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: build/jacocoHtml

      - name: Login Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build docker image
        run: docker build -t diegoseven/iot-system .

      - name: Push image docker
        run: docker push diegoseven/iot-system

      - name: Create SSH key file
        run: |
          echo "${{secrets.EC2_PRIVATE_KEY}}" > key.pem
          chmod 600 key.pem

      - name: Prepare coverage directory on EC2
        run: ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{secrets.EC2_IP}} 'sudo mkdir -p /var/www/coverage && sudo chown -R ec2-user:ec2-user /var/www/coverage'

      - name: Copy coverage reports to EC2
        run: scp -o StrictHostKeyChecking=no -i key.pem -r build/jacocoHtml/* ec2-user@${{secrets.EC2_IP}}:/var/www/coverage/

      - name: Remove SSH key file
        run: rm key.pem

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Ensure Docker is running and has permissions
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $(whoami)
          newgrp docker
      - name: Pull image from docker hub
        run: sudo docker pull diegoseven/iot-system:latest
      - name: Remove docker container
        run: |
          if [ "$(sudo docker ps -a -q -f name=iot-system)" ]; then
            sudo docker rm -f iot-system
          fi
      - name: Run docker container
        run: sudo docker run --network host -d -p 8080:8080 -e ENVIRONMENT=${{secrets.ENVIRONMENT}} -e URL_ENVIRONMENT=${{secrets.URL_ENVIRONMENT}} -e MY_JWT_SECRET_KEY='${{secrets.MY_JWT_SECRET_KEY}}' -e DATABASE_USERNAME=${{secrets.DATABASE_USERNAME}} -e DATABASE_PASSWORD='${{secrets.DATABASE_PASSWORD}}' -e DATABASE_URL=${{secrets.DATABASE_URL}} --name iot-system diegoseven/iot-system
